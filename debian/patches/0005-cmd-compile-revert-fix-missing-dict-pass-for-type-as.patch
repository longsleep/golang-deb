From: Matthew Dempsky <mdempsky@google.com>
Date: Thu, 14 Jul 2022 17:10:54 +0000
Subject: cmd/compile: revert "fix missing dict pass for type assertions"

This reverts CL 411934 (commit 460a93b54af4a0305f6007e44e41e6160a6469d8).

Fixes #53852.
Updates #53357.

Change-Id: I93d7015d8962d22ffd73128b038e4e7e7ca41c2f
---
 src/cmd/compile/internal/noder/stencil.go |  4 +--
 test/typeparam/issue53309.go              | 42 -------------------------------
 2 files changed, 2 insertions(+), 44 deletions(-)
 delete mode 100644 test/typeparam/issue53309.go

diff --git a/src/cmd/compile/internal/noder/stencil.go b/src/cmd/compile/internal/noder/stencil.go
index e89b692..a41b35a 100644
--- a/src/cmd/compile/internal/noder/stencil.go
+++ b/src/cmd/compile/internal/noder/stencil.go
@@ -1297,10 +1297,10 @@ func (g *genInst) dictPass(info *instInfo) {
 				m = convertUsingDictionary(info, info.dictParam, m.Pos(), mce.X, m, m.Type(), false)
 			}
 		case ir.ODOTTYPE, ir.ODOTTYPE2:
-			dt := m.(*ir.TypeAssertExpr)
-			if !dt.Type().HasShape() && !dt.X.Type().HasShape() {
+			if !m.Type().HasShape() {
 				break
 			}
+			dt := m.(*ir.TypeAssertExpr)
 			var rt ir.Node
 			if dt.Type().IsInterface() || dt.X.Type().IsEmptyInterface() {
 				ix := findDictType(info, m.Type())
diff --git a/test/typeparam/issue53309.go b/test/typeparam/issue53309.go
deleted file mode 100644
index d505f6b..0000000
--- a/test/typeparam/issue53309.go
+++ /dev/null
@@ -1,42 +0,0 @@
-// run -gcflags=-G=3
-
-// Copyright 2022 The Go Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style
-// license that can be found in the LICENSE file.
-
-package main
-
-type TaskInput interface {
-	deps() []*taskDefinition
-}
-
-type Value[T any] interface {
-	metaValue
-}
-
-type metaValue interface {
-	TaskInput
-}
-
-type taskDefinition struct {
-}
-
-type taskResult struct {
-	task *taskDefinition
-}
-
-func (tr *taskResult) deps() []*taskDefinition {
-	return nil
-}
-
-func use[T any](v Value[T]) {
-	_, ok := v.(*taskResult)
-	if !ok {
-		panic("output must be *taskResult")
-	}
-}
-
-func main() {
-	tr := &taskResult{&taskDefinition{}}
-	use(Value[string](tr))
-}
